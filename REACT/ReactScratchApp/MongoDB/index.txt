
===========================
MongoDB Terminal Practice Sheet with Expected Output
===========================

ðŸ“¦ Collection: students

----------------------------
ðŸ§ª Insert Sample Data
----------------------------
db.students.insertMany([
  { name: "Alice", age: 19, course: "Math", grades: [88, 92, 79] },
  { name: "Bob", age: 18, course: "Physics", grades: [75, 85] },
  { name: "Charlie", age: 22, course: "Chemistry", grades: [90, 91] },
  { name: "David", age: 24, course: "Math", grades: [60, 70, 80] },
  { name: "Eve", age: 20, course: "Physics", grades: [95] }
])

----------------------------
ðŸ”¹ Part 1: CRUD with Output
----------------------------

1. Insert One Document
Q: Add Frank (25, Biology)
Query:
db.students.insertOne({ name: "Frank", age: 25, course: "Biology", grades: [78, 80] })
Expected Output:
{ acknowledged: true, insertedId: ObjectId("...") }

2. Find All Documents
Q: List all students
Query:
db.students.find()
Expected Output (formatted):
[
  { name: "Alice", age: 21, course: "Math", grades: [88, 92, 79] },
  { name: "Bob", age: 23, course: "Physics", grades: [75, 85] },
  ...
]

3. Find with Condition
Q: Students in Physics
Query:
db.students.find({ course: "Physics" })
Output:
[
  { name: "Bob", age: 23, course: "Physics", grades: [75, 85] },
  { name: "Eve", age: 20, course: "Physics", grades: [95] }
]

4. Update Alice's age to 22
Query:
db.students.updateOne({ name: "Alice" }, { $set: { age: 22 } })
Output:
{ acknowledged: true, matchedCount: 1, modifiedCount: 1 }

5. Delete Charlie
Query:
db.students.deleteOne({ name: "Charlie" })
Output:
{ acknowledged: true, deletedCount: 1 }

----------------------------
ðŸ”¸ Part 2: Query Operators
----------------------------

6. Age > 21
Query:
db.students.find({ age: { $gt: 21 } })
Output:
[
  { name: "Bob", age: 23, ... },
  { name: "Charlie", age: 22, ... },
  { name: "David", age: 24, ... }
]

7. Course in Math or Chemistry
Query:
db.students.find({ course: { $in: ["Math", "Chemistry"] } })
Output:
[
  { name: "Alice", ... },
  { name: "Charlie", ... },
  { name: "David", ... }
]

8. Age 21 or Course = Chemistry
Query:
db.students.find({ $or: [{ age: 21 }, { course: "Chemistry" }] })
Output:
[
  { name: "Alice", ... },
  { name: "Charlie", ... }
]

----------------------------
ðŸ“Š Part 3: Aggregation with Output
----------------------------

9. Group by Course
Query:
db.students.aggregate([
  { $group: { _id: "$course", count: { $sum: 1 } } }
])
Output:
[
  { _id: "Math", count: 2 },
  { _id: "Physics", count: 2 },
  { _id: "Chemistry", count: 1 }
]

10. Sort by Age Desc
Query:
db.students.aggregate([{ $sort: { age: -1 } }])
Output:
[
  { name: "David", age: 24, ... },
  { name: "Bob", age: 23, ... },
  ...
]

11. Project Name + Age
Query:
db.students.aggregate([
  { $project: { name: 1, age: 1, _id: 0 } }
])
Output:
[
  { name: "Alice", age: 21 },
  { name: "Bob", age: 23 },
  ...
]

12. Avg Grade per Student
Query:
db.students.aggregate([
  { $project: { name: 1, avgGrade: { $avg: "$grades" } } }
])
Output:
[
  { name: "Alice", avgGrade: 86.33 },
  { name: "Bob", avgGrade: 80 },
  ...
]

----------------------------
ðŸ”½ Part 4: Pagination & Limit/Skip
----------------------------

13. Limit the number of results
Q: Show only the first 3 students.
Query:
db.students.find().limit(3)
Expected Output:
[
  { name: "Alice", ... },
  { name: "Bob", ... },
  { name: "Charlie", ... }
]

14. Skip and then Limit
Q: Skip the first 2 students and show the next 2.
Query:
db.students.find().skip(2).limit(2)
Expected Output:
[
  { name: "Charlie", ... },
  { name: "David", ... }
]

15. Sort and Paginate
Q: Sort students by name alphabetically and show the first 2.
Query:
db.students.find().sort({ name: 1 }).limit(2)
Expected Output:
[
  { name: "Alice", ... },
  { name: "Bob", ... }
]

16. Paginate with skip + limit
Q: Implement page 2 of size 2 (skip 2, take 2)
Query:
db.students.find().skip(2).limit(2)
Output:
[
  { name: "Charlie", ... },
  { name: "David", ... }
]



=============================
MongoDB Theoretical Questions & Answers
=============================

1. What is MongoDB? How is it different from a relational database?
- MongoDB is a NoSQL, document-based database that stores data in flexible, JSON-like documents (BSON). Unlike relational databases that use tables and rows, MongoDB uses collections and documents.

2. What is a document in MongoDB? How does it relate to a collection?
- A document is a single record in MongoDB, stored as a BSON object. A collection is a group of related documents, similar to a table in RDBMS.

3. What data format is used to store documents in MongoDB?
- BSON (Binary JSON), which allows rich data types like date, binary, and embedded documents.

4. What is the difference between insertOne and insertMany?
- `insertOne` inserts a single document into a collection. `insertMany` inserts multiple documents in a single operation.

5. How does MongoDB ensure data uniqueness in a collection?
- MongoDB automatically creates a unique index on the `_id` field. You can also define custom unique indexes on other fields.

6. What are the CRUD operations in MongoDB? Explain each.
- Create: insertOne, insertMany
- Read: find, findOne
- Update: updateOne, updateMany
- Delete: deleteOne, deleteMany

7. What does the $in operator do in a MongoDB query? Give an example.
- It matches documents where the fieldâ€™s value is in the specified array.
Example: db.students.find({ course: { $in: ["Math", "Physics"] } })

8. Differentiate between $and and $or in MongoDB queries.
- `$and`: All conditions must be true.
- `$or`: At least one condition must be true.

9. How is $regex used in MongoDB and when would you use it?
- `$regex` is used for pattern matching strings.
Example: db.users.find({ name: { $regex: "^A" } }) â€” names starting with A.

10. What happens if you use updateOne on a non-matching document?
- No document is updated; the operation returns matchedCount: 0 and modifiedCount: 0.

11. What is the aggregation framework in MongoDB? Why is it used?
- It processes data records and returns computed results. Useful for grouping, filtering, and transforming documents.

12. What is the purpose of the $group stage in an aggregation pipeline?
- It groups input documents by a specified key and allows performing aggregations like sum, avg, count.

13. What does the $project stage do in an aggregation?
- `$project` reshapes the documents by including, excluding, or computing fields.

14. How does $unwind work in MongoDB aggregations? Give an example.
- It deconstructs an array field from the input documents and outputs a document for each element.
Example: db.orders.aggregate([{ $unwind: "$items" }])

15. Explain the use of $match in aggregation pipelines.
- `$match` filters documents based on a condition, similar to a WHERE clause.

16. What is an index in MongoDB? Why is it important?
- An index improves the performance of queries by allowing faster lookup of documents.

17. What is the _id field in MongoDB and can it be changed?
- `_id` is the primary key for each document. It must be unique and cannot be changed after insertion.

18. How does MongoDB handle large datasets efficiently?
- Through indexing, sharding (horizontal scaling), and the aggregation pipeline.

19. What is the difference between find() and aggregate()?
- `find()` is used for simple queries; `aggregate()` supports complex data processing via multiple stages.

20. Can MongoDB perform joins like SQL? If yes, how?
- Yes, using `$lookup` in the aggregation framework, MongoDB can perform left outer joins.
